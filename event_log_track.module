<?php

/**
 * @file
 * The 'Event log Track' module track thr logs in database form submissions or
other actions that were performed on the website.
 */

use Drupal\Core\Render\Element;
use \Drupal\Core\Url;

/**
 * Inserts the log record in the event log track. Sets the lid.
 *
 * @param array $log
 *   The log record to be saved. This record contains the following fields:
 *   - {string} type
 *     The event type. This is usually the object type that is described by this
 *     event. Example: 'node' or 'user'. Required.
 *   - {string} operation
 *     The operation being performed. Example: 'insert'. Required.
 *   - {string} description
 *     A textual description of the event. Required.
 *   - {string} ref_numeric
 *     Reference to numeric id. Optional.
 *   - {string} ref_char
 *     Reference to alphabetical id. Optional.
 */
function event_log_track_insert(array &$log) {
  if (PHP_SAPI == 'cli') {
    // Ignore CLI requests.
    return;
  }

  if (empty($log['created'])) {
    $log['created'] = REQUEST_TIME;
  }

  if (empty($log['uid'])) {
    $account = \Drupal::currentUser();
    $log['uid'] = $account->id();
  }

  $ip = Drupal::request()->getClientIp();
  if (empty($log['ip']) && !empty($ip)) {
    $log['ip'] = $ip;
  }

  if (empty($log['path'])) {
    $log['path'] = Url::fromRoute('<current>')->getInternalPath();
  }

  \Drupal::database()->merge('event_log_track')
    ->key('lid')
    ->fields(array(
        'type' => $log['type'],
        'operation' => $log['operation'],
        'description' => $log['description'],
        'created' => $log['created'],
        'uid' => $log['uid'],
        'ip' => $log['ip'],
        'path' => $log['path'],
        'ref_char' => $log['ref_char'],
        'ref_numeric' => $log['ref_numeric'],
    ))
    ->execute();
}

/**
 * Returns all existing event handlers.
 *
 * @return array
 *   An array with the event log handlers.
 */
function event_log_track_get_event_handlers() {
  $handlers = drupal_static(__FUNCTION__);
  if ($handlers === NULL) {
    $handlers = Drupal::moduleHandler()->invokeAll('event_log_track_handlers');
    \Drupal::moduleHandler()->alter('event_log_track_handlers', $handlers);
  }
  return $handlers;
}

/**
 * Form submission callback.
 */
function event_log_track_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (!empty($form_state->__event_log_track_logged)) {
    // Some forms are submitted twice, for instance the node_form.
    // We will only call the submit callback once.
    return;
  }

  $form_state->__event_log_track_logged = TRUE;

  // Get form id.
  $form_id = $form['#form_id'];

  // Dispatch the submission to the correct event handler.
  $handlers = event_log_track_get_event_handlers();
  foreach ($handlers as $type => $handler) {
    $dispatch = FALSE;
    if (!empty($handler['form_ids']) && in_array($form_id, $handler['form_ids'])) {
      $dispatch = TRUE;
    }
    elseif (!empty($handler['form_ids_regexp'])) {
      foreach ($handler['form_ids_regexp'] as $regexp) {
        if (preg_match($regexp, $form_id)) {
          $dispatch = TRUE;
          break;
        }
      }
    }

    if ($dispatch) {
      // Dispatch!
      $function = $handler['form_submit_callback'];
      if (function_exists($function)) {
        $log = $function($form, $form_state, $form_id);
        if (!empty($log)) {
          // Log the event.
          $log['type'] = $type;
          event_log_track_insert($log);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function event_log_track_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add submit callback to ANY form action.
  event_log_track_add_submit_handler($form, 'event_log_track_form_submit');
}

/**
 * Adds a submit handler to all submit hooks in the form tree.
 *
 * @param array &$element
 *   A form element or the form itself.
 * @param string $callback
 *   The callback to be added.
 */
function event_log_track_add_submit_handler(array &$element, $callback) {
  if (array_key_exists("#submit", $element)) {
    $element["#submit"][] = $callback;
  }
  $keys = Element::children($element);
  foreach ($keys as $key) {
    if (is_array($element[$key])) {
      event_log_track_add_submit_handler($element[$key], $callback);
    }
  }
}
